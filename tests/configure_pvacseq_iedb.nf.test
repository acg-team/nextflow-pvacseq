nextflow_workflow {

    name "Test Subworkflow CONFIGURE_PVACSEQ_IEDB"
    script "subworkflows/local/configure_pvacseq_iedb/main.nf"
    workflow "CONFIGURE_PVACSEQ_IEDB"

    test("Only MHC Class I is required") {

        when {
            params {
                pvacseq_iedb = "$projectDir/tests/outdir/veeeeeeeeeeeeeeery_long/iedb_i_only"
                pvacseq_algorithm = "NetMHCpan"
                outdir = "$projectDir/tests/outdir"
            }
            workflow {
                """
                input[0] = "$params.pvacseq_iedb"
                input[1] = "$params.pvacseq_algorithm"
                """
            }
        }

        then {
            assert workflow.success
            def iedb_dir_count = 0
            if (path(workflow.out.iedb_dir.get(0)).exists()) {
                path(workflow.out.iedb_dir.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_dir_count++
                }
            }
            def iedb_mhc_i_count = 0
            if (path(workflow.out.iedb_mhc_i.get(0)).exists()) {
                path(workflow.out.iedb_mhc_i.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_i_count++
                }
            }
            def iedb_mhc_ii_count = 0
            if (path(workflow.out.iedb_mhc_ii.get(0)).exists()) {
                path(workflow.out.iedb_mhc_ii.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_ii_count++
                }
            }
            assert snapshot(
                iedb_dir_count,
                iedb_mhc_i_count,
                iedb_mhc_ii_count
            ).match()
        }
    }

    test("Only MHC Class II is required") {

        when {
            params {
                pvacseq_iedb = "$projectDir/tests/outdir/iedb_ii_only"
                pvacseq_algorithm = "NetMHCIIpan"
                outdir = "$projectDir/tests/outdir"
            }
            workflow {
                """
                input[0] = "$params.pvacseq_iedb"
                input[1] = "$params.pvacseq_algorithm"
                """
            }
        }

        then {
            assert workflow.success
            def iedb_dir_count = 0
            if (path(workflow.out.iedb_dir.get(0)).exists()) {
                path(workflow.out.iedb_dir.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_dir_count++
                }
            }
            def iedb_mhc_i_count = 0
            if (path(workflow.out.iedb_mhc_i.get(0)).exists()) {
                path(workflow.out.iedb_mhc_i.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_i_count++
                }
            }
            def iedb_mhc_ii_count = 0
            if (path(workflow.out.iedb_mhc_ii.get(0)).exists()) {
                path(workflow.out.iedb_mhc_ii.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_ii_count++
                }
            }
            assert snapshot(
                iedb_dir_count,
                iedb_mhc_i_count,
                iedb_mhc_ii_count
            ).match()
        }
    }

    test("Both MHC Class I and II are required") {

        when {
            params {
                pvacseq_iedb = "$projectDir/tests/outdir/iedb"
                pvacseq_algorithm = "NetMHCpan NetMHCIIpan"
                outdir = "$projectDir/tests/outdir"
            }
            workflow {
                """
                input[0] = "$params.pvacseq_iedb"
                input[1] = "$params.pvacseq_algorithm"
                """
            }
        }

        then {
            assert workflow.success
            def iedb_dir_count = 0
            if (path(workflow.out.iedb_dir.get(0)).exists()) {
                path(workflow.out.iedb_dir.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_dir_count++
                }
            }
            def iedb_mhc_i_count = 0
            if (path(workflow.out.iedb_mhc_i.get(0)).exists()) {
                path(workflow.out.iedb_mhc_i.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_i_count++
                }
            }
            def iedb_mhc_ii_count = 0
            if (path(workflow.out.iedb_mhc_ii.get(0)).exists()) {
                path(workflow.out.iedb_mhc_ii.get(0)).eachFileRecurse(groovy.io.FileType.FILES) {
                    iedb_mhc_ii_count++
                }
            }
            assert snapshot(
                iedb_dir_count,
                iedb_mhc_i_count,
                iedb_mhc_ii_count
            ).match()
        }
    }

    test("Invalid algorithm should fail") {

        when {
            params {
                pvacseq_iedb = "$projectDir/tests/data/invalid"
                pvacseq_algorithm = "InvalidAlgo"
                outdir = "$projectDir/tests/outdir"
            }
            workflow {
                """
                input[0] = "$params.pvacseq_iedb"
                input[1] = "$params.pvacseq_algorithm"
                """
            }
        }

        then {
            assert workflow.failed
        }
    }
}
