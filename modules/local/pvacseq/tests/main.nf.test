nextflow_process {

    name "Test Process PVACTOOLS_PVACSEQ"
    script "../main.nf"
    config "./nextflow.config"
    process "PVACTOOLS_PVACSEQ"

    tag "modules"
    tag "modules_nfcore"
    tag "pvactools"
    tag "pvactools/pvacseq"
    tag "pvactools/installvepplugin"
    tag "ensemblvep/vep"
    tag "untar"


    test("homo sapiens - vcf.gz") {


        when {
            process {
                """
                input[0] = Channel.fromList([tuple(
                    [id: "vep_annotated"], // meta
                    "HLA-A*23:01,DPA1*01:03-DPB1*105:01",
                    "TCGA-D1-A0ZZ-01A-11D-A10M-09", // tumor sample
                    file("/home/pho/nf-core-pvacseq/tests/data/vep_annotated.vcf", checkIfExists: true)
                )])
                input[1] = 'all'
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success }, // There is no meaningful output because a valid VEP cache is not available
               // { assert snapshot(process.out.versions).match("pvacseq_test_data_versions") }
            )
        }
    }

    test("homo sapiens - vcf.gz - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    'test',
                    'HLA-A*23:01,DPA1*01:03-DPB1*105:01',
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/empty.vcf.gz', checkIfExists: true)
                ])
                input[1] = 'NetMHC MHCnuggetsII'
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = []
                input[6] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match("pvacseq_stub") }
            )
        }

    }

}
